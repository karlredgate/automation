#!/usr/bin/env node

const FS = require('fs');

function warning( message ) {
    console.error( 'WARNING: ' + message );
}

function die( message ) {
    console.log( '# ERROR: ' + message );
    console.error( 'ERROR: ' + message );
    process.exit( -1 );
}

var parsers = {};

function dispatch( rule, name, schema ) {
    if ( schema.type == null ) {
        die( 'schema "' + name + '" has no TYPE -- ' + JSON.stringify(schema) );
    }

    /*
     * the schema.type can be a string or an array.
     */
    if ( schema.type.constructor === Array ) {
        [type, default_value] = schema.type;
    } else {
        [type, default_value] = [schema.type, null];
    }

    let parser = parsers[type];
    if ( parser == null ) {
        die( 'No parser found for ' + name + ' : ' + schema.type );
    }
    parser( rule, name, schema );
}

/*
 * extract part of the schema
 */
function extract( schema, segments ) {
    if ( segments.length == 0 ) return schema;
    let segment = segments.shift();
    return extract( schema[segment], segments );
}

function qstring( name ) {
    return '"\\"' + name + '\\"" ';
}

function keystring( name ) {
    if ( name == null ) return '';
    return qstring(name) + '":" ';
}

function basic_type( rule, name, type ) {
    console.log( rule + ': ' + keystring(name) + ' ' + type + ' ;' );
}

parsers["number"] = function ( rule, name, schema ) {
    basic_type( rule, name, 'Number' );
};

parsers["integer"] = function ( rule, name, schema ) {
    basic_type( rule, name, 'Integer' );
};

parsers["boolean"] = function ( rule, name, schema ) {
    basic_type( rule, name, 'Boolean' );
};

parsers["datetime"] = function ( rule, name, schema ) {
    basic_type( rule, name, 'rfc-date-time-string' );
};

function is_basic_string( schema ) {
    if ( schema["enum"] != null ) return false;
    if ( schema["format"] != null ) return false;
    if ( schema["oneOf"] != null ) return false;
    return true;
}

function string_enum( rule, name, schema ) {
    if ( schema["enum"] == null ) return false;
    let strings = schema["enum"].map( e => qstring(e) );
    console.log( "[ " + strings.join('|') + " ]" );
    return true;
}

function format_to_non_terminal( format ) {
    switch ( format ) {
    case 'ipv4'     : return 'L4Address';
    case 'ipv6'     : return 'L4Address'; // this should be an IPv6Address
    case 'hostname' : return 'hostname';
    }
    return 'UNKNOWN';
}

function string_format( rule, name, schema ) {
    if ( schema["format"] == null ) return false;
    console.log( format_to_non_terminal( schema['format'] ) );
    // throw an error
    return true;
}

function string_oneOf( rule, name, schema ) {
    let items = schema['oneOf'];
    if ( items == null ) return false;

    function is_format( item ) { return item['format'] != null; }
    function value( item ) {
        return '"\\"" ' + format_to_non_terminal(item['format']) + ' "\\""';
    }
    let formats = items.filter(is_format).map(value);
    console.log( formats.join(' | ') );

    return true;
}

function string_example( rule, name, schema ) {
    if ( schema["examples"] == null ) return false;
    let strings = schema["examples"].map( e => qstring(e) );
    console.log( "[ " + strings.join('|') + " | StringLiteral ]" );
    return true;
}

/*
 * Need to handle "default" slot also
 * handle "oneOf" for "format"
 */
parsers["string"] = function ( rule, name, schema ) {
    console.log( rule + ': ' + keystring(name) );

    if ( string_enum(    rule, name, schema) ) return console.log(';');
    if ( string_format(  rule, name, schema) ) return console.log(';');
    if ( string_oneOf(   rule, name, schema) ) return console.log(';');
    if ( string_example( rule, name, schema) ) return console.log(';');

    console.log( 'StringLiteral' );
    console.log( ' ;' );
};

parsers["array"] = function ( rule, name, schema ) {
    console.log( rule + ': ' + keystring(name) + ' "[" ' + rule + '-items "]" ;' );
    console.log( rule + '-items: ' +
                 rule + '-item | ' +
                 rule + '-items  "," ' + rule + '-item ;' );

    dispatch( rule + '-item', null, schema.items );
};

parsers["object"] = function ( rule, name, schema ) {
    // this might not be correct - need to see if this means we need to be inheriting other props from ??
    if ( typeof schema.additionalProperties != 'undefined' ) {
        if ( typeof schema.properties == 'undefined' ) {
            schema.properties = schema.additionalProperties.properties;
        }
    }
    if ( typeof schema.properties == 'undefined' ) {
        die( "Invalid schema - object definition for '" + rule + "' has no properties" );
    }
    let keys = Object.keys(schema.properties);
    let rules = keys.map( k => rule + '-' + k ); // prefix the rule name
    console.log( rule + ':\n' + keystring(name) + ' "{" ' );
    console.log( rules.join(' ",\\n" \n') );
    console.log( ' "}\\n" ;\n' );
    let p = schema.properties;
    // KNR - maybe not this
    keys.map( key => dispatch(rule + '-' + key, key, p[key]) );
};

function check_definitions( dto ) {
    // if ( typeof dto["type"] == 'undefined' ) {
    if ( typeof dto["properties"] == 'undefined' ) {
        if ( typeof dto["type"] != 'undefined' ) {
            if ( dto["type"] == 'array' ) {
                warning( 'This schema has an array as its top level structure' );
                return;
            }
            warning( 'This schema has a "type" but no "properties"' );
            return;
        }
        if ( dto.definitions ) {
            console.error( "this is not a schema" );
            process.exit( 0 );
        }
        die( "Invalid schema - no top level type" );
    }
}

/*
 * resolve() grovels through the schema and replaces all '$ref' entries
 * with the actual schema that is referenced.  It is retrieved from
 * the local file if it is local, and from the external file otherwise.
 */
function resolve( dto, filename ) {
    if ( dto.constructor  !== Object ) return dto;
    if ( dto["$ref"] == null ) {
        let keys = Object.keys(dto);
        keys.map( key => dto[key] = resolve(dto[key], filename) );
        return dto;
    }
    // We know this is a $ref - so we need to load the definition
    // from the file/path
    let [file, path] = dto["$ref"].split('#');
    if ( file == '' ) file = filename;
    file = file || filename;
    let content = JSON.parse( FS.readFileSync(file, 'utf8') );
    let segments = path.split('/');
    segments.shift(); // remove empty root
    let snippet = extract( content, segments );
    return resolve( snippet, file );
}

function parse( err, data ) {
    if ( err ) die( "failed to read file: " + err );
    // let d = JSON.parse(data);
    // warning( "DTO: " + JSON.stringify(d) );
    // warning( "RES: " + JSON.stringify(resolve(d, process.argv[2])) );
    let dto = resolve( JSON.parse(data), process.argv[2] );
    // console.error( JSON.stringify(dto) );
    check_definitions( dto );
    console.log( '#include "base.pb"' );
    console.log( '#include "hostnames.pb"' );
    dispatch( 'root', null, dto );
}

FS.readFile( process.argv[2], parse );

/* vim: set autoindent expandtab sw=4 syntax=javascript : */
