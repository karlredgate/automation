#!/usr/bin/env ruby
#
# Validations
#   4xx problem details
#   source dto same type as response
#   check for typos in uri params vs what is seen in uri example

require 'yaml'
require 'json'

class RAML

    # Load the file and construct an object from it
    def initialize( file )
        @data = YAML.load_file( file )
        @base = @data['baseUri']
        file = @data['traits']
        @traits = YAML.load_file(file) unless file.nil?
    end

    def paths( schema )
        schema.select { |key,val| key.match('/') }
    end

    def verbs( schema )
        verb_list = ['get','put','post','delete','head','options','trace','connect']
        # schema.select { |key,val| key.match('/').nil? }
        schema.select { |key,val| verb_list.include? key.downcase }
    end

    def report_uri_params( schema )
        return if schema.nil?
        schema.each { |param,desc|
            puts "(#{desc['type']}) \033[35m{#{param}}\033[39m #{desc['description']}"
        }
    end

    def color_uri( uri )
        uri.gsub('{',"\033[35m{").gsub('}',"}\033[39m")
    end

    def color_media( media_type )
        "\033[33m#{media_type}\033[39m"
    end

    def error( message )
        puts "\033[41m#{message}\033[49m"
    end

    def report_body( verb, schema )
        case verb
        when "GET" then
            return error("Body content type present in a GET") unless schema.nil?
        when "POST" then
            return error("BODY content type missing in POST")  if schema.nil?
        when "PUT" then
            return error("BODY content type missing in PUT")  if schema.nil?
        end
        return if schema.nil?
        media_type = schema.keys[0]
        media_schema = color_media( schema[media_type]['schema'] )
        puts "BODY: #{media_type} + #{media_schema}"
    end

    def color_response_dto( code, dto )
        return color_media(dto) if ( (code / 100) != 4 )
        return color_media(dto) if dto.match(/httpProblemDetail/i)
        return "\033[41m#{dto}\033[49m"
    end

    def media_type( code, body )
        return "EMPTY" if body.nil?
        media_type   = body.keys[0]
        media_schema = body[media_type]['schema']
        "#{media_type} + #{color_response_dto(code,media_schema)}"
    end

    def colored_code( code )
        case code / 100
        when 2 then "\033[32m#{code}\033[39m"
        when 3 then "\033[32m#{code}\033[39m"
        when 4 then "\033[31m#{code}\033[39m"
        when 5 then "\033[31m#{code}\033[39m"
        end
    end

    def trait( name )
        i = @traits.detect { |trait| trait.keys[0] == name }
        i[name]
    end

    def merge_trait( schema, trait )
        trait.each { |key,value|
            schema[key] ||= {}
            schema[key].merge!( value )
        }
    end

    # for each entry in the "is" array, add the values
    # of its members to the schema
    def import_interfaces( schema )
        return if schema['is'].nil?
        schema['is'].each { |name| merge_trait( schema, trait(name) ) }
    end

    def report_responses( verb, schema )
        case verb
        when "GET" then
            return error("Response body content type missing in a GET") if schema.nil?
        when "HEAD" then
            return error("Response body content type present in a HEAD") unless schema.nil?
        end
        return if schema.nil?
        schema.each { |code,desc|
            media = media_type( code, desc['body'] )
            description  = desc['description'] || "\033[41mMissing Description\033[49m"
            mesg = "(#{description.strip})" unless description.nil?
            puts "#{colored_code(code)} -> #{media}"
            puts "       #{mesg}"
        }
    end

    # using the schema RAML object passed in, report on the
    # children of the prefix URL
    def report_schema( prefix, schema )
        paths(schema).each { |path,subschema|
            verbs(subschema).each { |verb,desc|
                import_interfaces( desc )
                description  = desc['description'] || "\033[41mMissing description\033[49m"
                display_name = desc['displayName'] || "\033[41mMissing display name\033[49m"
                puts "\n ----- #{display_name.strip} -------"
                puts " #{description}"
                puts " ----- -------------- -------"
                uri = color_uri( "#{prefix}#{path}" )
                puts "\033[36m#{verb.upcase}\033[39m  #{uri}"
                report_uri_params( subschema['uriParameters'] )

                report_body(      verb.upcase, desc['body'] )
                report_responses( verb.upcase, desc['responses'] )
            }
            report_schema( "#{prefix}#{path}", subschema )
        }
    end

    # @base is the baseUri pulled from the RAML file
    # @data is the complete RAML object
    def report
        report_schema( @base, @data )
    end

    def json; JSON.dump( @data ) end

end

# $stdout.reopen( IO.popen('less -R','w') ) if STDOUT.isatty
# $out = STDOUT.isatty ? IO.popen('less -R','w') : STDOUT

raml = RAML.new( ARGV[0] )
raml.report

# vim:autoindent expandtab sw=4
