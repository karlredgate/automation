
[Unit]
Description=THis is something service

# By using the After option, we can state that our unit should be started
# after the units we provide in the form of a space-separated list. For
# example, observing again the service file where the Apache web service
# is defined, we can see the following:
After=network.target remote-fs.target nss-lookup.target httpd-init.service

# If any of the units on which a service depends fails to start, the
# activation of the service it's stopped: this is why those are called
# hard dependencies. In this line, extracted from the service file of
# the avahi-daemon, we can see how it is declared as dependent from the
# avahi-daemon.socket unit:
Requires=avahi-daemon.socket

# What is the difference? As we said above, if any "hard" dependency
# fails, the service will fail itself; a failure of any "soft" dependency,
# however, doesn't influence what happens to the dependent unit. In the
# provided example, we can see how the docker.service unit has a soft
# dependency on the docker-storage-setup.service one:
Wants=docker-storage-setup.service



[Service]
# Systemd defines and distinguish between some different type of
# services depending on their expected behavior. The type of a service
# can be defined by using the Type option, providing one of these values:
#  * simple, forking, oneshot, dbus, notify
#
# The default type of a service, if the Type and Busname options
# are not defined, but a command is provided via the ExecStart option,
# is simple. When this type of service is set, the command declared in
# ExecStart is considered to be the main process/service.
# 
# The forking type works differently: the command provided with ExecStart
# # is expected to fork and launch a child process, which will become the
# main process/service. The parent process it's expected to die once the
# startup process is over.
# 
# The oneshot type is used as the default if the Type and ExecStart
# options are not defined. It works pretty much like simple: the difference
# is that the process is expected to finish its job before other units
# are launched. The unit, however, it's still considered as "active" even
# after the command exits, if the RemainAfterExit option is set to "yes"
# (the default is "no").
# 
# The next type of service is dbus. If this type of service is used,
# the daemon is expected to get a name from Dbus, as specified in the
# BusName option, which in this case, becomes mandatory. For the rest it
# works like the simple type. Consequent units, however, are launched only
# after the DBus name is acquired.
# 
# Another process works similarly to simple, and it is notify: the
# difference is that the daemon is expected to send a notification via
# the sd_notify function. Only once this notification is sent, consequent
# units are launched.
Type=simple

StandardOutput=journal

# The command to be executed when a service starts, is declared by using
# the ExecStart option. The argument passed to the option can also be the
# path to a script. Optionally, we can declare commands to be executed
# before and after the service is started, by using the ExecStartPre and
# ExecStartPost options respectively.
ExecStart=/opt/local/bin/run.sh --arg

# In a similar fashion, we can specify the command to be executed when
# a service is reloaded or stopped, by using the ExecStop and ExecReload
# options. Similarly to what happens with ExecStartPost, a command or
# multiple commands to be launched after a process is stopped, can be
# specified with the ExecStopPost option.
ExecStop=
ExecReload=
ExecStartPost=
ExecStopPost=

Restart=on-failure

# By using specific options, it's possible to define some timeouts for the
# service. Let's start with RestartSec: by using this option, we can setup
# the amount of time (by default in seconds) systemd should wait before
# restarting a service. A timespan can also be used as a value for this
# option, as "5min 20s". The default is 100ms.
RestartSec=

# The TimeoutStartSec and TimeoutStopSec options can be used to specify,
# respectively, the timeout for a service startup and stop, in seconds. In
# the first case, if after the specified timeout the daemon startup process
# it's not completed, it will be considered to be failed.

# In the second case, if a service is to be stopped but is not terminated
# after the specified timeout, first a SIGTERM and then, after the same
# amount of time, a SIGKILL signal are sent to it. Both options accepts
# also a timespan as a value and can be configured at once, with a shortcut:
# TimeoutSec. If infinity is provided as a value, the timeouts are disabled.
# 
# Finally, we can setup the limit for the amount of time a service can
# run, using the RuntimeMaxSec. If a service exceeds this timeout, it's
# terminated and considered as failed.


PIDFile=/var/run/something.pid
User=kredgate
WorkingDirectory=/var/something
RuntimeDirectory=where
RuntimeDirectoryMode=0755

# In the [install] section, we can use options related to the service
# installation. For example, by using the Alias option, we can specify a
# space separated list of aliases to be used for the service when using
# the systemctl commands (except enable).
#
# Similarly to what happens with the Requires and Wants options in the
# [Unit] section, to establish dependencies, in the [install] section,
# we can use RequiredBy and WantedBy. In both cases we declare a list
# of units which depend on the one we are configuring: with the former
# option they will be hard-dependent on it, with the latter they will be
# considered only as weak-dependent. For example:
[Install]
WantedBy=multi-user.target


# There are basically two places in the filesystem where systemd service
# units are installed: /usr/lib/systemd/system and /etc/systemd/system. The
# former path is used for services provided by installed packages, while
# the latter can be used by the system administrator for its own services
# which can override the default ones.
# 
# Let's create a custom service example. Suppose we want to create a service
# which disables the wake-on-lan feature on a specific ethernet interface
# (ens5f5 in our case) when it is started, and re-enables it when it is
# stopped. We can use the ethtool command to accomplish the main task. Here
# is how our service file could look like:

[Unit]
Description=Force ens5f5 ethernet interface to 100Mbps
Requires=Network.target
After=Network.target

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/sbin/ethtool -s ens5f5 wol d
ExecStop=/usr/sbin/ethtool -s ens5f5 wol g

[Install]
WantedBy=multi-user.target
